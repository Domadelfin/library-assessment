// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int          @id @default(autoincrement())
  firstName             String
  middleName            String
  lastName              String
  email                 String       @unique
  role                  Role
  phoneNumber           String
  pendingOverduePayment Decimal     @default(0.0)
  borrowedCopies        BookCopy[]
  borrowHistories       BorrowHistory[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Book {
  id        Int         @id @default(autoincrement())
  title     String
  category  Categories
  authorId  Int
  author    Author @relation(fields: [authorId], references: [id])
  copies    BookCopy[]
  isbn      String? @unique
  @@unique([title, authorId])
}

model BookCopy {
  id              Int       @id @default(autoincrement())
  bookId          Int
  book            Book      @relation(fields: [bookId], references: [id])
  shelfId         Int
  status          Status    @default(Available)
  checkOut        DateTime?
  borrowerId      Int?
  borrower        User?     @relation(fields: [borrowerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  borrowHistories BorrowHistory[]
  barcode         String? @unique
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  bio   String?
  books Book[]
}

model BorrowHistory {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  bookCopyId Int
  bookCopy   BookCopy  @relation(fields: [bookCopyId], references: [id])
  borrowedAt DateTime  @default(now())
  returnedAt DateTime?
}

enum Status {
  Available
  Checked_Out
  Reserved
  Lost
}

enum Role {
  Librarian
  Member
}

enum Categories {
  Fantasy
  Horror
  Mystery
  Romance_Novel
  Science_Fiction
  Autobiography
  Historical_Fiction
  Thriller
  Young_Adult
  Literature
  Adventure_Fiction
  History
  Graphic_Novel
  Short_Story
  Cookbook
  Fairytale
  Poetry
  WesternFiction
  Biography
  Classics
  Crime
  Dystopian
}